#+OPTIONS: toc:nil num:nil author:nil creator:nil \n:nil |:t
#+OPTIONS: @:t ::t ^:t -:t f:t *:t <:t

* ゲームAI覚書

** ルールベースAI

   ルールを入れ子にしてはいけない。
   一つのルールは他のルールに依存してはいけない。
   Ruleは敵と考えていい。
   distanceは実際には敵との距離を計算して出す。

   : class Player < Hash
   : end

   評価点 = 静的評価値 + a * 残り体力 + b * 距離

   ※ (a + b) == 1.0 とする

   : class Rule < Hash
   :   def evaluate(player)
   :     (self[:base] || 0) + self[:a] * player[:hp] + self[:b] * player[:distance]
   :   end
   : end

   ルールのセットを管理する別クラスが必要

   : class RuleSelector
   :   attr_accessor :rules
   :   def initialize
   :     @rules = []
   :   end
   :   def choice(player)
   :     @rules.collect{|r|r.evaluate(player)} # => [5.6000000000000005, 7.0], [9.2, 6.4], [5.6000000000000005, 7.0, 15.0]
   :     @rules.sort_by{|r|r.evaluate(player)}.last
   :   end
   : end

   プレイヤーの体力が高いほど「逃げる」。プレイヤーとの距離が離れているほど「追う」。二つのルールを登録。

   : selector = RuleSelector.new
   : selector.rules << Rule[:name => "逃げる", :base => 0.2, :a => 0.8, :b => 0.2]
   : selector.rules << Rule[:name => "追う",   :base => 0.4, :a => 0.2, :b => 0.8]

   プレイヤーの状態に合わせて選択するルールが変わる

   : player1 = Player[:hp =>  5, :distance => 7]
   : player2 = Player[:hp => 10, :distance => 5]

   : selector.choice(player1)[:name]  # => "追う"
   : selector.choice(player2)[:name]  # => "逃げる"

   静的評価値が高くして「飛ぶ」を選択させる場合

   : selector.rules << Rule[:name => "飛ぶ",   :base => 9.0, :a => 0.5, :b => 0.5]
   : selector.choice(player1)[:name]  # => "飛ぶ"

   選択方法はこの他、ランダムにどちらかのルールを選ぶ、交互に選択などがある。
   評価したあと評価関数を変化させることで簡易学習になる。

** ステートベースAI

   mode と mode_count で行なっていた方法に近い。

   以下は、階層なしで状態とカウンタをクラス化したもの。
   結局はifの連続で書く。

   : module Statable
   :   attr_reader :counter, :key
   :
   :   def initialize(key)
   :     transition(key)
   :   end
   :
   :   def transition(key)
   :     @key = key
   :     @counter = 0
   :   end
   :
   :   def transition!(key)
   :     transition(key)
   :     throw :transit
   :   end
   :
   :   def transition_loop(&block)
   :     begin
   :       ret = catch(:transit) do
   :         yield
   :         true
   :       end
   :     end until ret == true
   :     @counter += 1
   :   end
   : end
   :
   : class State
   :   include Statable
   : end
   :
   : state = State.new(:mode_a)
   : 3.times do
   :   state.transition_loop do
   :     case state.key
   :     when :mode_a
   :       if state.counter == 1
   :         state.transition! :mode_b
   :       end
   :     when :mode_b
   :       # ...
   :     end
   :   end
   : end

   デザパタのStateパターンを使いつつ階層化。
   キャッチする名前は階層化しているためグローバルだとまずい。なので object_id でユニークにしてある。
   a a1 b b1 の順に遷移する。

   : class State
   :   attr_reader :counter, :current
   :
   :   def initialize(*args)
   :     transition(*args)
   :   end
   :
   :   def transition(key, *args)
   :     @current = key.to_s.classify.constantize.new(*args)
   :   end
   :
   :   def transition!(key, *args)
   :     transition(key, *args)
   :     throw "transit_#{object_id}".to_sym
   :   end
   :
   :   def run
   :     begin
   :       ret = catch("transit_#{object_id}".to_sym) do
   :         @current.run
   :         true
   :       end
   :     end until ret == true
   :     @current.counter += 1
   :   end
   : end
   :
   : class Player
   :   attr_accessor :state
   :
   :   def initialize
   :     @state = State.new(:mode_a, self)
   :   end
   :
   :   def run
   :     @state.run
   :   end
   :
   :   def top_level_transition!(key)
   :     @state.transition!(key, self)
   :   end
   : end
   :
   : class StateBase
   :   attr_accessor :player, :counter, :sub_state
   :
   :   def initialize(player)
   :     @player = player
   :     @counter = 0
   :   end
   :
   :   def run
   :     if @sub_state
   :       @sub_state.run
   :     end
   :   end
   : end
   :
   : class ModeA < StateBase
   :   def run
   :     if @counter == 1
   :       p "a"
   :       @sub_state = State.new(:mode_a1, @player)
   :     end
   :     super
   :   end
   : end
   :
   : class ModeA1 < StateBase
   :   def run
   :     p "a1"
   :     @player.top_level_transition!(:mode_b)
   :     super
   :   end
   : end
   :
   : class ModeB < StateBase
   :   def run
   :     if @counter == 1
   :       p "b"
   :       @sub_state = State.new(:mode_b1, @player)
   :     end
   :     super
   :   end
   : end
   :
   : class ModeB1 < StateBase
   :   def run
   :     p "b1"
   :     @player.top_level_transition!(:mode_a)
   :     super
   :   end
   : end
   :
   : player = Player.new
   : 3.times{ player.run }
   : # >> "a"
   : # >> "a1"
   : # >> "b"
   : # >> "b1"

   クラスが多すぎて後で見てもわけがわからん。
   これだけ書くのにも時間がかかるし、デバッグがしずらいのも難点。

** ビヘイビアベースAI

   子ビヘイビアはただの配列ではなく「選択方法」を知っている配列でないといけないため Array を拡張したクラスが必要。Array のサブクラスでもいいかも。

   : class Box
   :   attr_accessor :selector, :list
   :
   :   def initialize
   :     @selector = "確率的選択"
   :     @list = []
   :   end
   :
   :   def <<(node)
   :     @list << node
   :   end
   :
   :   def get_by_selector
   :     nodes = @list.find_all{|n|n.executable?}
   :     case @selector
   :     when "確率的選択"
   :       nodes.sample
   :     when "優先度リスト"
   :       # 優先度の高いもの順
   :     when "シーケンシャル"
   :       # 決まった順に。
   :     when "シーケンシャルルーピング"
   :       # 決まった順に繰り返す
   :     when "オンオフ"
   :       # ランダムだけど一度選択したものは選択しない
   :     end
   :   end
   : end

   これが一つの単位。書いてないけど「具体的な行動」を行うメソッドも必要。

   : class Behavior < Tree::Node
   :   attr_accessor :box     # この中の list に複数の子ビヘイビアが入る
   :
   :   # 各ビヘイビアは現在の状況で実行可能かどうかを自分自身で宣言する→宣言的手法
   :   def executable?
   :     true
   :   end
   :
   :   # for tree method
   :   def nodes
   :     if @box
   :       @box.list
   :     else
   :       []
   :     end
   :   end
   : end

   定義しやすいように。

   : class Builder
   :   attr_reader :root
   :
   :   def self.build(*args, &block)
   :     new(*args).tap{|o|o.instance_eval(&block)}.root
   :   end
   :
   :   def initialize(root = nil)
   :     @root = root || Behavior.new("root")
   :   end
   :
   :   def add(name, options = {}, &block)
   :     node = Behavior.new(name)
   :     node.parent = @root
   :     @root.box ||= Box.new
   :     @root.box << node
   :     if block_given?
   :       self.class.new(node).instance_eval(&block)
   :     end
   :     self
   :   end
   : end

   木の構築

   : root = Builder.build do
   :   add("交戦") do
   :     add("攻撃") do
   :       add("剣を振る")
   :       add("攻撃魔法") do
   :         add("召喚A")
   :         add("召喚B")
   :       end
   :       add("縦で剣をはじく")
   :     end
   :     add("防御") do
   :       add("一歩後退する")
   :       add("縦で身を隠す")
   :     end
   :   end
   :   add("撤退") do
   :     add("足止めする") do
   :       add("トラップをしかける")
   :       add("弓矢を放つ")
   :     end
   :     add("逃走する")
   :   end
   :   add("休憩") do
   :     add("立ち止まる")
   :     add("回復する") do
   :       add("回復魔法")
   :       add("回復薬を飲む")
   :     end
   :   end
   : end

   確認

   : puts root.tree
   : # >> root
   : # >> ├─交戦
   : # >> │   ├─攻撃
   : # >> │   │   ├─剣を振る
   : # >> │   │   ├─攻撃魔法
   : # >> │   │   │   ├─召喚A
   : # >> │   │   │   └─召喚B
   : # >> │   │   └─縦で剣をはじく
   : # >> │   └─防御
   : # >> │       ├─一歩後退する
   : # >> │       └─縦で身を隠す
   : # >> ├─撤退
   : # >> │   ├─足止めする
   : # >> │   │   ├─トラップをしかける
   : # >> │   │   └─弓矢を放つ
   : # >> │   └─逃走する
   : # >> └─休憩
   : # >>     ├─立ち止まる
   : # >>     └─回復する
   : # >>         ├─回復魔法
   : # >>         └─回復薬を飲む

   この木のノードを選択。

   : node = root
   : loop do
   :   nodes = node.nodes                       # 子ビヘイビアたちを
   :   nodes = nodes.find_all{|n|n.executable?} # 今実行できるものたちに絞って
   :   break if nodes.empty?                    # いなくなってたらあきらめて
   :   node = nodes.sample                      # いたらランダムに選択
   :   node.key # => "撤退", "逃走する"
   : end

   だけどこれは正しくない。
   nodes のどれを選択するかは nodes が知っとかないといけない。

   ↓改善

   : node = root
   : loop do
   :   break unless node.box
   :   node = node.box.get_by_selector
   :   node.key # => "休憩", "回復する", "回復薬を飲む"
   : end

   選択は、box.get_by_selector に任せる。

   ここで「攻撃(a)」の下にぶらさがる木を「逃走する(b)」の下に移動させてみる。(ビヘイビア自体ではなくその下にぶらさがる配列を管理するboxを移動させる)
   添字にマジックナンバーがあるけどここはハッシュで一発選択させたいところ

   : a = root.box.list[0].box.list[0]   # 攻撃のノードを取得
   : a_box = a.box                      # 攻撃の下の木をいったん退避
   : a.box = nil                          # そこは無くなるので nil にしとく
   :
   : b = root.box.list[1].box.list.last # 「逃走する」のノードを取得して
   : a_box.list.each{|n|n.parent = b}     # 親を変更して(←これ本来は不要。treeモジュール表示に必要だから入れてるだけ)
   : b.box = a_box                      # 逃走するにぶらさがるグループを置き換え

   移動できたか確認

   : puts root.tree
   : # >> root
   : # >> ├─交戦
   : # >> │   ├─攻撃
   : # >> │   └─防御
   : # >> │       ├─一歩後退する
   : # >> │       └─縦で身を隠す
   : # >> ├─撤退
   : # >> │   ├─足止めする
   : # >> │   │   ├─トラップをしかける
   : # >> │   │   └─弓矢を放つ
   : # >> │   └─逃走する
   : # >> │       ├─剣を振る
   : # >> │       ├─攻撃魔法
   : # >> │       │   ├─召喚A
   : # >> │       │   └─召喚B
   : # >> │       └─縦で剣をはじく
   : # >> └─休憩
   : # >>     ├─立ち止まる
   : # >>     └─回復する
   : # >>         ├─回復魔法
   : # >>         └─回復薬を飲む

   『WEB+DBのはじめてのゲームAI』では「上に階層に依存していてはいけない」と書いてあったので、子ビヘイビア配列に選択方法を持つようにしたけど、
   無駄に複雑になってしまったし、移動させるのが大変で、メリットがよくわからない。なので、まちがった解釈をしてしまったかもしれない。

   読み返してみると「攻撃魔法などが入ったボックスに名前に攻撃という名前をつける」とあるので、やっぱり攻撃というノードが選択方法を持っていていい気がする。
   名前をつけたボックスが、名前は置いたままにして別のボックスのところに移動できてしまうのもおかしな話だし。
   なので上記のサンプルは *間違い*

** 参考

   - WEB+DBのはじめてのゲームAI

** 用語

#+ATTR_HTML: border="1" rules="all" frame="all"
   | 用語               | 英語                   | 意味・使い方など                                         |
   |--------------------+------------------------+----------------------------------------------------------|
   | ルールベースAI     | Rule based AI          | ルールが単位                                             |
   | 単位               | atomic                 | ルールの単位                                             |
   | 背反               | exclusive              | 二つあるルールが同時に発火することがない場合、背反である |
   | ルールの競合       |                        | ルールが複数発火したとき                                 |
   | 解消               |                        | 競合したルールを解決すること                             |
   | 発火               | fired                  | ルールの条件が満たされた状態のこと                       |
   | ルールセレクタ     |                        | 競合するルールを解消するモジュール                       |
   | FSM                | Finite Sate Machine    | 有限状態機械                                             |
   | 震動               |                        | 高速に2つのステートをいったりきたり(ダメな状態)          |
   | キャラクターAI     |                        | 敵の意思                                                 |
   | メタAI             |                        | 状況や進行を動的に変更                                   |
   | プロシージャル技術 |                        | 地形や物体を自動生成する技術                             |
   | 循環構造           | cyclic                 |                                                          |
   | DAG                | Directed Acyclic Graph | 非循環方式型(Behavior Tree とも言われる)                 |
   | 宣言的手法         | Declarative Method     | 実行可能条件を各ビヘイビアが持つこと                     |
   | ボックス           |                        | 同じ抽象度のビヘイビアのまとまり                         |
   | レイヤー           |                        | ボックスのこと                                           |
